// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                  = require("bs-platform/lib/js/curry.js");
var CamlinternalOO         = require("bs-platform/lib/js/camlinternalOO.js");
var Renderable$Sweenyville = require("./renderable.bs.js");

var class_tables = [
  0,
  0,
  0
];

function character(startX, startY) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "data",
          "tick",
          "decel",
          "accel"
        ]);
    var ids = CamlinternalOO.new_methods_variables($$class, [
          "tick",
          "setSpeedIf",
          "decel",
          "data",
          "accel"
        ], [
          "data",
          "maxSpeed"
        ]);
    var tick = ids[0];
    var setSpeedIf = ids[1];
    var decel = ids[2];
    var data = ids[3];
    var accel = ids[4];
    var data$1 = ids[5];
    var maxSpeed = ids[6];
    CamlinternalOO.set_methods($$class, /* array */[
          tick,
          (function (self$1, scene) {
              var match = Renderable$Sweenyville.next_coordinates(scene, /* tuple */[
                    self$1[data$1][/* x */0],
                    self$1[data$1][/* y */1]
                  ], /* tuple */[
                    self$1[data$1][/* vx */2],
                    self$1[data$1][/* vy */3]
                  ]);
              self$1[data$1][/* x */0] = match[0];
              self$1[data$1][/* y */1] = match[1];
              return /* () */0;
            }),
          accel,
          (function (self$1, direction) {
              var match = Renderable$Sweenyville.accel(direction, /* tuple */[
                    self$1[data$1][/* vx */2],
                    self$1[data$1][/* vy */3]
                  ], self$1[maxSpeed]);
              return Curry._4(self$1[0][setSpeedIf], self$1, /* true */1, match[0], match[1]);
            }),
          decel,
          (function (self$1, direction) {
              var match = Renderable$Sweenyville.decel(direction, self$1[data$1][/* vx */2], self$1[data$1][/* vy */3]);
              return Curry._4(self$1[0][setSpeedIf], self$1, match[0], match[1], match[2]);
            }),
          data,
          (function (self$1, _) {
              return self$1[data$1];
            }),
          setSpeedIf,
          (function (self$1, going, vx, vy) {
              if (going) {
                self$1[data$1][/* vx */2] = vx;
                self$1[data$1][/* vy */3] = vy;
                return /* () */0;
              } else {
                return 0;
              }
            })
        ]);
    var env_init = function (env) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[data$1] = /* float array */[
        env[1],
        env[2],
        0.0,
        0.0
      ];
      self[maxSpeed] = 8.0;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              0,
              startX,
              startY
            ]);
}

exports.character = character;
/* No side effect */
