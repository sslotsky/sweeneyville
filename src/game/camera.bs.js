// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry          = require("bs-platform/lib/js/curry.js");
var Caml_oo_curry  = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

var $$class = CamlinternalOO.create_table([
      "position",
      "tick",
      "follow",
      "clampX",
      "clampY",
      "unclampX",
      "unclampY"
    ]);

var ids = CamlinternalOO.new_methods_variables($$class, [
      "unclampY",
      "unclampX",
      "track",
      "tick",
      "position",
      "follow",
      "focus",
      "clampY",
      "clampX"
    ], [
      "focused",
      "position",
      "clampedX",
      "clampedY"
    ]);

var unclampY = ids[0];

var unclampX = ids[1];

var track = ids[2];

var tick = ids[3];

var position = ids[4];

var follow = ids[5];

var focus = ids[6];

var clampY = ids[7];

var clampX = ids[8];

var focused = ids[9];

var position$1 = ids[10];

var clampedX = ids[11];

var clampedY = ids[12];

CamlinternalOO.set_methods($$class, /* array */[
      follow,
      (function (self$1, character) {
          return Curry._2(self$1[0][focus], self$1, /* Subject */[character]);
        }),
      tick,
      (function (self$1, _) {
          var f = self$1[focused][0];
          if (f) {
            return Curry._2(self$1[0][track], self$1, f[0]);
          } else {
            return /* () */0;
          }
        }),
      position,
      (function (self$1, _) {
          return self$1[position$1][0];
        }),
      clampX,
      (function (self$1, _) {
          self$1[clampedX][0] = /* true */1;
          return /* () */0;
        }),
      clampY,
      (function (self$1, _) {
          self$1[clampedY][0] = /* true */1;
          return /* () */0;
        }),
      unclampX,
      (function (self$1, _) {
          self$1[clampedX][0] = /* false */0;
          return /* () */0;
        }),
      unclampY,
      (function (self$1, _) {
          self$1[clampedY][0] = /* false */0;
          return /* () */0;
        }),
      focus,
      (function (self$1, sub) {
          self$1[focused][0] = sub;
          return /* () */0;
        }),
      track,
      (function (self$1, c) {
          var match = self$1[position$1][0];
          var d = Caml_oo_curry.js2(-1033677270, 1, c, /* () */0);
          var match$1 = self$1[clampedX][0];
          var newX = match$1 !== 0 ? match[0] : d[/* x */0];
          var match$2 = self$1[clampedY][0];
          var newY = match$2 !== 0 ? match[1] : d[/* y */1];
          self$1[position$1][0] = /* tuple */[
            newX,
            newY
          ];
          return /* () */0;
        })
    ]);

function obj_init() {
  var self = CamlinternalOO.create_object_opt(0, $$class);
  self[focused] = [/* None */0];
  self[position$1] = [/* tuple */[
      0.0,
      0.0
    ]];
  self[clampedX] = [/* false */0];
  self[clampedY] = [/* false */0];
  return self;
}

CamlinternalOO.init_class($$class);

var camera = obj_init(0);

exports.camera = camera;
/* class Not a pure module */
