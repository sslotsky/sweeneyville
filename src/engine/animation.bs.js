// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                = require("bs-platform/lib/js/array.js");
var Curry                  = require("bs-platform/lib/js/curry.js");
var Caml_oo_curry          = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO         = require("bs-platform/lib/js/camlinternalOO.js");
var Pixi$Sweenyville       = require("./pixi.bs.js");
var Reasonable$Sweenyville = require("../lib/reasonable.bs.js");

function sequence_info_generator(get_name) {
  return (function (num_frames, seq_name) {
      return /* tuple */[
              num_frames,
              (function (param) {
                  return Curry._2(get_name, seq_name, param);
                })
            ];
    });
}

function frame_sequence_generator(get_name, name, num_frames) {
  return $$Array.map((function (n) {
                return Curry._2(get_name, name, n);
              }), Reasonable$Sweenyville.range(1, num_frames));
}

var class_tables = [
  0,
  0,
  0
];

function animator(player, sprite, map) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "tick",
          "set_freq",
          "set_map"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.new_methods_variables($$class, [
          "update_texture",
          "tick",
          "set_map",
          "set_freq",
          "max_frames",
          "current_info",
          "animate"
        ], [
          "ticks",
          "frame",
          "seq",
          "freq",
          "current_map"
        ]);
    var update_texture = ids[0];
    var tick = ids[1];
    var set_map = ids[2];
    var set_freq = ids[3];
    var max_frames = ids[4];
    var current_info = ids[5];
    var animate = ids[6];
    var ticks = ids[7];
    var frame = ids[8];
    var seq = ids[9];
    var freq = ids[10];
    var current_map = ids[11];
    CamlinternalOO.set_methods($$class, /* array */[
          tick,
          (function (self$1, _) {
              self$1[ticks][0] = self$1[ticks][0] + 1 | 0;
              if (self$1[ticks][0] === self$1[freq][0]) {
                Curry._2(self$1[0][animate], self$1, /* () */0);
                self$1[ticks][0] = 0;
                return /* () */0;
              } else {
                return 0;
              }
            }),
          set_freq,
          (function (self$1, f) {
              self$1[freq][0] = f;
              return /* () */0;
            }),
          set_map,
          (function (self$1, map) {
              self$1[frame][0] = 1;
              self$1[current_map][0] = map;
              return /* () */0;
            }),
          animate,
          (function (self$1, _) {
              var tmp = self$1[env][1];
              var d = Caml_oo_curry.js2(-1033677270, 2, tmp, /* () */0);
              var moving = +(d[/* vx */2] !== 0.0 || d[/* vy */3] !== 0.0);
              var nextSeq = moving !== 0 ? /* Running */0 : /* Idle */1;
              if (nextSeq !== self$1[seq][0]) {
                self$1[frame][0] = 1;
                self$1[seq][0] = nextSeq;
              } else {
                var match = +(self$1[frame][0] === Curry._2(self$1[0][max_frames], self$1, /* () */0));
                self$1[frame][0] = match !== 0 ? 1 : self$1[frame][0] + 1 | 0;
              }
              return Curry._2(self$1[0][update_texture], self$1, /* () */0);
            }),
          current_info,
          (function (self$1, _) {
              var map = self$1[current_map][0];
              var match = self$1[seq][0];
              if (match !== 0) {
                return map[/* idle */0];
              } else {
                return map[/* running */1];
              }
            }),
          max_frames,
          (function (self$1, _) {
              return Curry._2(self$1[0][current_info], self$1, /* () */0)[0];
            }),
          update_texture,
          (function (self$1, _) {
              var match = Curry._2(self$1[0][current_info], self$1, /* () */0);
              return Pixi$Sweenyville.Sprite[/* setTexture */5](self$1[env][0], Pixi$Sweenyville.App[/* texture */4](Curry._1(match[1], self$1[frame][0])));
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[ticks] = [0];
      self[frame] = [1];
      self[seq] = [/* Idle */1];
      self[freq] = [3];
      self[current_map] = [env$1[1]];
      self[env] = env$1[0];
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              [
                sprite,
                player
              ],
              map
            ]);
}

exports.sequence_info_generator  = sequence_info_generator;
exports.frame_sequence_generator = frame_sequence_generator;
exports.animator                 = animator;
/* Pixi-Sweenyville Not a pure module */
