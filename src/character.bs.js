// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry          = require("bs-platform/lib/js/curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function max(a, b) {
  var leftGreater = +(a > b);
  if (leftGreater !== 0) {
    return a;
  } else {
    return b;
  }
}

function min(a, b) {
  var leftGreater = +(a > b);
  if (leftGreater !== 0) {
    return b;
  } else {
    return a;
  }
}

function doIf(condition, block) {
  if (condition !== 0) {
    return Curry._1(block, /* () */0);
  } else {
    return /* () */0;
  }
}

var class_tables = [
  0,
  0,
  0
];

function character(startX, startY) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "data",
          "place",
          "tick",
          "advance",
          "degrade"
        ]);
    var ids = CamlinternalOO.new_methods_variables($$class, [
          "turn",
          "tick",
          "place",
          "degrade",
          "data",
          "advance"
        ], [
          "maxSpeed",
          "position",
          "speed",
          "d"
        ]);
    var turn = ids[0];
    var tick = ids[1];
    var place = ids[2];
    var degrade = ids[3];
    var data = ids[4];
    var advance = ids[5];
    var maxSpeed = ids[6];
    var position = ids[7];
    var speed = ids[8];
    var d = ids[9];
    CamlinternalOO.set_methods($$class, /* array */[
          tick,
          (function (self$1, _) {
              var match = self$1[position][0];
              var match$1 = self$1[speed][0];
              self$1[position][0] = /* tuple */[
                match[0] + match$1[0] | 0,
                match[1] + match$1[1] | 0
              ];
              return /* () */0;
            }),
          place,
          (function (self$1, newX, newY) {
              self$1[position][0] = /* tuple */[
                newX,
                newY
              ];
              return /* () */0;
            }),
          advance,
          (function (self$1, direction) {
              var match = self$1[speed][0];
              var vy = match[1];
              var vx = match[0];
              switch (direction) {
                case 0 : 
                    self$1[speed][0] = /* tuple */[
                      vx,
                      max(vy - 1 | 0, -self$1[maxSpeed][0] | 0)
                    ];
                    return /* () */0;
                case 1 : 
                    self$1[speed][0] = /* tuple */[
                      vx,
                      min(vy + 1 | 0, self$1[maxSpeed][0])
                    ];
                    return /* () */0;
                case 2 : 
                    self$1[speed][0] = /* tuple */[
                      max(vx - 1 | 0, -self$1[maxSpeed][0] | 0),
                      vy
                    ];
                    return /* () */0;
                case 3 : 
                    self$1[speed][0] = /* tuple */[
                      min(vx + 1 | 0, self$1[maxSpeed][0]),
                      vy
                    ];
                    return /* () */0;
                
              }
            }),
          degrade,
          (function (self$1, direction) {
              var match = self$1[speed][0];
              var vy = match[1];
              var vx = match[0];
              switch (direction) {
                case 0 : 
                    return doIf(+(vy < 0), (function () {
                                  self$1[speed][0] = /* tuple */[
                                    vx,
                                    min(vy + 1 | 0, 0)
                                  ];
                                  return /* () */0;
                                }));
                case 1 : 
                    return doIf(+(vy > 0), (function () {
                                  self$1[speed][0] = /* tuple */[
                                    vx,
                                    max(vy - 1 | 0, 0)
                                  ];
                                  return /* () */0;
                                }));
                case 2 : 
                    return doIf(+(vx < 0), (function () {
                                  self$1[speed][0] = /* tuple */[
                                    min(vx + 1 | 0, 0),
                                    vy
                                  ];
                                  return /* () */0;
                                }));
                case 3 : 
                    return doIf(+(vx > 0), (function () {
                                  self$1[speed][0] = /* tuple */[
                                    max(vx - 1 | 0, 0),
                                    vy
                                  ];
                                  return /* () */0;
                                }));
                
              }
            }),
          data,
          (function (self$1, _) {
              var match = self$1[position][0];
              var match$1 = self$1[speed][0];
              return /* record */[
                      /* x */match[0],
                      /* y */match[1],
                      /* vx */match$1[0],
                      /* vy */match$1[1],
                      /* direction */self$1[d][0]
                    ];
            }),
          turn,
          (function (self$1, direction) {
              self$1[d][0] = direction;
              return /* () */0;
            })
        ]);
    var env_init = function (env) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[maxSpeed] = [15];
      self[position] = [/* tuple */[
          env[1],
          env[2]
        ]];
      self[speed] = [/* tuple */[
          0,
          0
        ]];
      self[d] = [/* Right */3];
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              0,
              startX,
              startY
            ]);
}

exports.max       = max;
exports.min       = min;
exports.doIf      = doIf;
exports.character = character;
/* No side effect */
